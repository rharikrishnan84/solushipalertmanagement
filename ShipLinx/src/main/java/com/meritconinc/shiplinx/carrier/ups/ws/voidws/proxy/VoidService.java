package com.meritconinc.shiplinx.carrier.ups.ws.voidws.proxy;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.5.0
 * 2011-12-10T08:24:48.704-05:00
 * Generated source version: 2.5.0
 * 
 */
@WebServiceClient(name = "VoidService", 
                  wsdlLocation = "Void.wsdl",
                  targetNamespace = "http://www.ups.com/WSDL/XOLTWS/Void/v1.1") 
public class VoidService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.ups.com/WSDL/XOLTWS/Void/v1.1", "VoidService");
    public final static QName VoidPort = new QName("http://www.ups.com/WSDL/XOLTWS/Void/v1.1", "VoidPort");
    static {
        URL url = null;
        try {
            url = new URL("Void.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(VoidService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "Void.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public VoidService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public VoidService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public VoidService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns VoidPortType
     */
    @WebEndpoint(name = "VoidPort")
    public VoidPortType getVoidPort() {
        return super.getPort(VoidPort, VoidPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns VoidPortType
     */
    @WebEndpoint(name = "VoidPort")
    public VoidPortType getVoidPort(WebServiceFeature... features) {
        return super.getPort(VoidPort, VoidPortType.class, features);
    }

}
